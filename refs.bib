@inproceedings{vieira2008,
  title={Treplica: ubiquitous replication},
  author={Vieira, Gustavo MD and Buzato, Luiz E},
  booktitle={SBRC'08: Proc. of the 26th Brazilian Symposium on Computer Networks and Distributed Systems},
  pages={25},
  year={2008}
}

@book{cachin2011,
author = {Cachin, Christian and Guerraoui, Rachid and Rodrigues, Luis},
file = {:F$\backslash$:/Documents/books/distributed-book.pdf:pdf},
publisher = {Springer Science {\&} Business Media},
title = {{Introduction to reliable and secure distributed programming}},
year = {2011}
}

@article{lamport1998part,
  title={The part-time parliament},
  author={Lamport, Leslie},
  journal={ACM Transactions on Computer Systems (TOCS)},
  volume={16},
  number={2},
  pages={133--169},
  year={1998},
  publisher={ACM}
}

@article{Lamport1978,
abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
archivePrefix = {arXiv},
arxivId = {10614036},
author = {Lamport, Leslie},
doi = {10.1145/359545.359563},
eprint = {10614036},
file = {:F$\backslash$:/Documents/papers/active-replication-lamport.pdf:pdf},
isbn = {0262133865},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {and phrases,clock synchronization,computer networks,distributed systems,multiprocess},
number = {7},
pages = {558--565},
pmid = {10802651},
title = {{Time, clocks, and the ordering of events in a distributed system}},
url = {http://portal.acm.org/citation.cfm?doid=359545.359563},
volume = {21},
year = {1978}
}


@article{Lamport2006,
abstract = {As used in practice, traditional consensus algorithms require three message delays before any process can learn the chosen value. Fast Paxos is an extension of the classic Paxos algorithm that allows the value to be learned in two message delays. How and why the algorithm works are explained informally, and a TLA+ specification of the algorithm appears as an appendix.},
author = {Lamport, Leslie},
doi = {10.1007/s00446-006-0005-x},
file = {:F$\backslash$:/workspace/eqm/to-read/fast-paxos.pdf:pdf},
isbn = {0178-2770},
issn = {01782770},
journal = {Distributed Computing},
keywords = {Consensus,Distributed algorithms,Fault tolerance,Paxos},
number = {2},
pages = {79--103},
title = {{Fast Paxos}},
volume = {19},
year = {2006}
}


@inproceedings{hunt2010zookeeper,
  title={ZooKeeper: Wait-free Coordination for Internet-scale Systems.},
  author={Hunt, Patrick and Konar, Mahadev and Junqueira, Flavio Paiva and Reed, Benjamin},
  booktitle={USENIX annual technical conference},
  volume={8},
  pages={9},
  year={2010},
  organization={Boston, MA, USA}
}

@book{herlihy2011art,
  title={The art of multiprocessor programming},
  author={Herlihy, Maurice and Shavit, Nir},
  year={2011},
  publisher={Morgan Kaufmann}
}

@inproceedings{herlihy1990methodology,
  title={A methodology for implementing highly concurrent data structures},
  author={Herlihy, Maurice},
  booktitle={ACM SIGPLAN Notices},
  volume={25},
  number={3},
  pages={197--206},
  year={1990},
  organization={ACM}
}

@article{herlihy1991wait,
  title={Wait-free synchronization},
  author={Herlihy, Maurice},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={13},
  number={1},
  pages={124--149},
  year={1991},
  publisher={ACM}
}
@article{attiya1994wait,
  title={Are wait-free algorithms fast?},
  author={Attiya, Hagit and Lynch, Nancy and Shavit, Nir},
  journal={Journal of the ACM (JACM)},
  volume={41},
  number={4},
  pages={725--763},
  year={1994},
  publisher={ACM}
}
@inproceedings{michael1996simple,
  title={Simple, fast, and practical non-blocking and blocking concurrent queue algorithms},
  author={Michael, Maged M and Scott, Michael L},
  booktitle={Proceedings of the fifteenth annual ACM symposium on Principles of distributed computing},
  pages={267--275},
  year={1996},
  organization={ACM}
}

@Article{lamport77b,
  Title                    = {Concurrent reading and writing},
  Author                   = {Lamport, Leslie},
  Journal                  = {Commun. ACM},
  Year                     = {1977},

  Month                    = nov,
  Number                   = {11},
  Pages                    = {806--811},
  Volume                   = {20},

  Acmid                    = {359878},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/359863.359878},
  File                     = {:papers/lamport77b.pdf:PDF},
  ISSN                     = {0001-0782},
  Issue_date               = {Nov. 1977},
  Keywords                 = {asynchronous multiprocessing, multiprocess synchronization, readers/writers problem, shared data},
  Numpages                 = {6},
  Owner                    = {buzato},
  Publisher                = {ACM},
  Timestamp                = {2013.09.25},
  Url                      = {http://doi.acm.org/10.1145/359863.359878}
}